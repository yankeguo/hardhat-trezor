// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.2
// source: messages-ethereum-definitions.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "hw.trezor.messages.ethereum_definitions";

/**
 * Ethereum definitions type enum.
 * Used to check the encoded EthereumNetworkInfo or EthereumTokenInfo message.
 */
export enum EthereumDefinitionType {
  NETWORK = 0,
  TOKEN = 1,
  UNRECOGNIZED = -1,
}

export function ethereumDefinitionTypeFromJSON(
  object: any,
): EthereumDefinitionType {
  switch (object) {
    case 0:
    case "NETWORK":
      return EthereumDefinitionType.NETWORK;
    case 1:
    case "TOKEN":
      return EthereumDefinitionType.TOKEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EthereumDefinitionType.UNRECOGNIZED;
  }
}

export function ethereumDefinitionTypeToJSON(
  object: EthereumDefinitionType,
): string {
  switch (object) {
    case EthereumDefinitionType.NETWORK:
      return "NETWORK";
    case EthereumDefinitionType.TOKEN:
      return "TOKEN";
    case EthereumDefinitionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Ethereum network definition. Used to (de)serialize the definition.
 *
 * Definition types should not be cross-parseable, i.e., it should not be possible to
 * incorrectly parse network info as token info or vice versa.
 * To achieve that, the first field is wire type varint while the second field is wire type
 * length-delimited. Both are a mismatch for the token definition.
 *
 * @embed
 */
export interface EthereumNetworkInfo {
  chainId: number;
  symbol: string;
  slip44: number;
  name: string;
}

/**
 * Ethereum token definition. Used to (de)serialize the definition.
 *
 * Definition types should not be cross-parseable, i.e., it should not be possible to
 * incorrectly parse network info as token info or vice versa.
 * To achieve that, the first field is wire type length-delimited while the second field
 * is wire type varint. Both are a mismatch for the network definition.
 *
 * @embed
 */
export interface EthereumTokenInfo {
  address: Uint8Array;
  chainId: number;
  symbol: string;
  decimals: number;
  name: string;
}

/**
 * Contains an encoded Ethereum network and/or token definition. See ethereum-definitions.md for details.
 * @embed
 */
export interface EthereumDefinitions {
  /** encoded Ethereum network */
  encodedNetwork?: Uint8Array | undefined;
  /** encoded Ethereum token */
  encodedToken?: Uint8Array | undefined;
}

function createBaseEthereumNetworkInfo(): EthereumNetworkInfo {
  return { chainId: 0, symbol: "", slip44: 0, name: "" };
}

export const EthereumNetworkInfo = {
  encode(
    message: EthereumNetworkInfo,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chainId !== 0) {
      writer.uint32(8).uint64(message.chainId);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.slip44 !== 0) {
      writer.uint32(24).uint32(message.slip44);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EthereumNetworkInfo {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEthereumNetworkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.chainId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.slip44 = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EthereumNetworkInfo {
    return {
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      slip44: isSet(object.slip44) ? globalThis.Number(object.slip44) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: EthereumNetworkInfo): unknown {
    const obj: any = {};
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.slip44 !== 0) {
      obj.slip44 = Math.round(message.slip44);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EthereumNetworkInfo>, I>>(
    base?: I,
  ): EthereumNetworkInfo {
    return EthereumNetworkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EthereumNetworkInfo>, I>>(
    object: I,
  ): EthereumNetworkInfo {
    const message = createBaseEthereumNetworkInfo();
    message.chainId = object.chainId ?? 0;
    message.symbol = object.symbol ?? "";
    message.slip44 = object.slip44 ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEthereumTokenInfo(): EthereumTokenInfo {
  return {
    address: new Uint8Array(0),
    chainId: 0,
    symbol: "",
    decimals: 0,
    name: "",
  };
}

export const EthereumTokenInfo = {
  encode(
    message: EthereumTokenInfo,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.chainId !== 0) {
      writer.uint32(16).uint64(message.chainId);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.decimals !== 0) {
      writer.uint32(32).uint32(message.decimals);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EthereumTokenInfo {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEthereumTokenInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.chainId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.decimals = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EthereumTokenInfo {
    return {
      address: isSet(object.address)
        ? bytesFromBase64(object.address)
        : new Uint8Array(0),
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: EthereumTokenInfo): unknown {
    const obj: any = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes(message.address);
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EthereumTokenInfo>, I>>(
    base?: I,
  ): EthereumTokenInfo {
    return EthereumTokenInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EthereumTokenInfo>, I>>(
    object: I,
  ): EthereumTokenInfo {
    const message = createBaseEthereumTokenInfo();
    message.address = object.address ?? new Uint8Array(0);
    message.chainId = object.chainId ?? 0;
    message.symbol = object.symbol ?? "";
    message.decimals = object.decimals ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEthereumDefinitions(): EthereumDefinitions {
  return { encodedNetwork: new Uint8Array(0), encodedToken: new Uint8Array(0) };
}

export const EthereumDefinitions = {
  encode(
    message: EthereumDefinitions,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (
      message.encodedNetwork !== undefined &&
      message.encodedNetwork.length !== 0
    ) {
      writer.uint32(10).bytes(message.encodedNetwork);
    }
    if (
      message.encodedToken !== undefined &&
      message.encodedToken.length !== 0
    ) {
      writer.uint32(18).bytes(message.encodedToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EthereumDefinitions {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEthereumDefinitions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encodedNetwork = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.encodedToken = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EthereumDefinitions {
    return {
      encodedNetwork: isSet(object.encodedNetwork)
        ? bytesFromBase64(object.encodedNetwork)
        : new Uint8Array(0),
      encodedToken: isSet(object.encodedToken)
        ? bytesFromBase64(object.encodedToken)
        : new Uint8Array(0),
    };
  },

  toJSON(message: EthereumDefinitions): unknown {
    const obj: any = {};
    if (
      message.encodedNetwork !== undefined &&
      message.encodedNetwork.length !== 0
    ) {
      obj.encodedNetwork = base64FromBytes(message.encodedNetwork);
    }
    if (
      message.encodedToken !== undefined &&
      message.encodedToken.length !== 0
    ) {
      obj.encodedToken = base64FromBytes(message.encodedToken);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EthereumDefinitions>, I>>(
    base?: I,
  ): EthereumDefinitions {
    return EthereumDefinitions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EthereumDefinitions>, I>>(
    object: I,
  ): EthereumDefinitions {
    const message = createBaseEthereumDefinitions();
    message.encodedNetwork = object.encodedNetwork ?? new Uint8Array(0);
    message.encodedToken = object.encodedToken ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
