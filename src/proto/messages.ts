// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.2
// source: messages.proto

/* eslint-disable */

export const protobufPackage = "hw.trezor.messages";

/** Mapping between Trezor wire identifier (uint) and a protobuf message */
export enum MessageType {
  /** MessageType_Initialize - Management */
  MessageType_Initialize = 0,
  MessageType_Ping = 1,
  MessageType_Success = 2,
  MessageType_Failure = 3,
  MessageType_ChangePin = 4,
  MessageType_WipeDevice = 5,
  MessageType_GetEntropy = 9,
  MessageType_Entropy = 10,
  MessageType_LoadDevice = 13,
  MessageType_ResetDevice = 14,
  MessageType_SetBusy = 16,
  MessageType_Features = 17,
  MessageType_PinMatrixRequest = 18,
  MessageType_PinMatrixAck = 19,
  MessageType_Cancel = 20,
  MessageType_LockDevice = 24,
  MessageType_ApplySettings = 25,
  MessageType_ButtonRequest = 26,
  MessageType_ButtonAck = 27,
  MessageType_ApplyFlags = 28,
  MessageType_GetNonce = 31,
  MessageType_Nonce = 33,
  MessageType_BackupDevice = 34,
  MessageType_EntropyRequest = 35,
  MessageType_EntropyAck = 36,
  MessageType_PassphraseRequest = 41,
  MessageType_PassphraseAck = 42,
  MessageType_RecoveryDevice = 45,
  MessageType_WordRequest = 46,
  MessageType_WordAck = 47,
  MessageType_GetFeatures = 55,
  MessageType_SdProtect = 79,
  MessageType_ChangeWipeCode = 82,
  MessageType_EndSession = 83,
  MessageType_DoPreauthorized = 84,
  MessageType_PreauthorizedRequest = 85,
  MessageType_CancelAuthorization = 86,
  MessageType_RebootToBootloader = 87,
  MessageType_GetFirmwareHash = 88,
  MessageType_FirmwareHash = 89,
  MessageType_UnlockPath = 93,
  MessageType_UnlockedPathRequest = 94,
  MessageType_ShowDeviceTutorial = 95,
  MessageType_UnlockBootloader = 96,
  MessageType_AuthenticateDevice = 97,
  MessageType_AuthenticityProof = 98,
  MessageType_ChangeLanguage = 990,
  MessageType_TranslationDataRequest = 991,
  MessageType_TranslationDataAck = 992,
  MessageType_SetBrightness = 993,
  MessageType_SetU2FCounter = 63,
  MessageType_GetNextU2FCounter = 80,
  MessageType_NextU2FCounter = 81,
  /**
   * MessageType_Deprecated_PassphraseStateRequest - Deprecated messages, kept for protobuf compatibility.
   * Both are marked wire_out so that we don't need to implement incoming handler for legacy
   *
   * @deprecated
   */
  MessageType_Deprecated_PassphraseStateRequest = 77,
  /** @deprecated */
  MessageType_Deprecated_PassphraseStateAck = 78,
  /** MessageType_FirmwareErase - Bootloader */
  MessageType_FirmwareErase = 6,
  MessageType_FirmwareUpload = 7,
  MessageType_FirmwareRequest = 8,
  MessageType_ProdTestT1 = 32,
  /** MessageType_GetPublicKey - Bitcoin */
  MessageType_GetPublicKey = 11,
  MessageType_PublicKey = 12,
  MessageType_SignTx = 15,
  MessageType_TxRequest = 21,
  MessageType_TxAck = 22,
  MessageType_GetAddress = 29,
  MessageType_Address = 30,
  MessageType_TxAckPaymentRequest = 37,
  MessageType_SignMessage = 38,
  MessageType_VerifyMessage = 39,
  MessageType_MessageSignature = 40,
  MessageType_GetOwnershipId = 43,
  MessageType_OwnershipId = 44,
  MessageType_GetOwnershipProof = 49,
  MessageType_OwnershipProof = 50,
  MessageType_AuthorizeCoinJoin = 51,
  /** MessageType_CipherKeyValue - Crypto */
  MessageType_CipherKeyValue = 23,
  MessageType_CipheredKeyValue = 48,
  MessageType_SignIdentity = 53,
  MessageType_SignedIdentity = 54,
  MessageType_GetECDHSessionKey = 61,
  MessageType_ECDHSessionKey = 62,
  MessageType_CosiCommit = 71,
  MessageType_CosiCommitment = 72,
  MessageType_CosiSign = 73,
  MessageType_CosiSignature = 74,
  /** MessageType_DebugLinkDecision - Debug */
  MessageType_DebugLinkDecision = 100,
  MessageType_DebugLinkGetState = 101,
  MessageType_DebugLinkState = 102,
  MessageType_DebugLinkStop = 103,
  MessageType_DebugLinkLog = 104,
  MessageType_DebugLinkMemoryRead = 110,
  MessageType_DebugLinkMemory = 111,
  MessageType_DebugLinkMemoryWrite = 112,
  MessageType_DebugLinkFlashErase = 113,
  MessageType_DebugLinkLayout = 9001,
  MessageType_DebugLinkReseedRandom = 9002,
  MessageType_DebugLinkRecordScreen = 9003,
  MessageType_DebugLinkEraseSdCard = 9005,
  MessageType_DebugLinkWatchLayout = 9006,
  MessageType_DebugLinkResetDebugEvents = 9007,
  /** MessageType_EthereumGetPublicKey - Ethereum */
  MessageType_EthereumGetPublicKey = 450,
  MessageType_EthereumPublicKey = 451,
  MessageType_EthereumGetAddress = 56,
  MessageType_EthereumAddress = 57,
  MessageType_EthereumSignTx = 58,
  MessageType_EthereumSignTxEIP1559 = 452,
  MessageType_EthereumTxRequest = 59,
  MessageType_EthereumTxAck = 60,
  MessageType_EthereumSignMessage = 64,
  MessageType_EthereumVerifyMessage = 65,
  MessageType_EthereumMessageSignature = 66,
  MessageType_EthereumSignTypedData = 464,
  MessageType_EthereumTypedDataStructRequest = 465,
  MessageType_EthereumTypedDataStructAck = 466,
  MessageType_EthereumTypedDataValueRequest = 467,
  MessageType_EthereumTypedDataValueAck = 468,
  MessageType_EthereumTypedDataSignature = 469,
  MessageType_EthereumSignTypedHash = 470,
  /** MessageType_NEMGetAddress - NEM */
  MessageType_NEMGetAddress = 67,
  MessageType_NEMAddress = 68,
  MessageType_NEMSignTx = 69,
  MessageType_NEMSignedTx = 70,
  MessageType_NEMDecryptMessage = 75,
  MessageType_NEMDecryptedMessage = 76,
  /** MessageType_TezosGetAddress - Tezos */
  MessageType_TezosGetAddress = 150,
  MessageType_TezosAddress = 151,
  MessageType_TezosSignTx = 152,
  MessageType_TezosSignedTx = 153,
  MessageType_TezosGetPublicKey = 154,
  MessageType_TezosPublicKey = 155,
  /** MessageType_StellarSignTx - Stellar */
  MessageType_StellarSignTx = 202,
  MessageType_StellarTxOpRequest = 203,
  MessageType_StellarGetAddress = 207,
  MessageType_StellarAddress = 208,
  MessageType_StellarCreateAccountOp = 210,
  MessageType_StellarPaymentOp = 211,
  MessageType_StellarPathPaymentStrictReceiveOp = 212,
  MessageType_StellarManageSellOfferOp = 213,
  MessageType_StellarCreatePassiveSellOfferOp = 214,
  MessageType_StellarSetOptionsOp = 215,
  MessageType_StellarChangeTrustOp = 216,
  MessageType_StellarAllowTrustOp = 217,
  MessageType_StellarAccountMergeOp = 218,
  MessageType_StellarManageDataOp = 220,
  MessageType_StellarBumpSequenceOp = 221,
  MessageType_StellarManageBuyOfferOp = 222,
  MessageType_StellarPathPaymentStrictSendOp = 223,
  MessageType_StellarClaimClaimableBalanceOp = 225,
  MessageType_StellarSignedTx = 230,
  MessageType_CardanoGetPublicKey = 305,
  MessageType_CardanoPublicKey = 306,
  MessageType_CardanoGetAddress = 307,
  MessageType_CardanoAddress = 308,
  MessageType_CardanoTxItemAck = 313,
  MessageType_CardanoTxAuxiliaryDataSupplement = 314,
  MessageType_CardanoTxWitnessRequest = 315,
  MessageType_CardanoTxWitnessResponse = 316,
  MessageType_CardanoTxHostAck = 317,
  MessageType_CardanoTxBodyHash = 318,
  MessageType_CardanoSignTxFinished = 319,
  MessageType_CardanoSignTxInit = 320,
  MessageType_CardanoTxInput = 321,
  MessageType_CardanoTxOutput = 322,
  MessageType_CardanoAssetGroup = 323,
  MessageType_CardanoToken = 324,
  MessageType_CardanoTxCertificate = 325,
  MessageType_CardanoTxWithdrawal = 326,
  MessageType_CardanoTxAuxiliaryData = 327,
  MessageType_CardanoPoolOwner = 328,
  MessageType_CardanoPoolRelayParameters = 329,
  MessageType_CardanoGetNativeScriptHash = 330,
  MessageType_CardanoNativeScriptHash = 331,
  MessageType_CardanoTxMint = 332,
  MessageType_CardanoTxCollateralInput = 333,
  MessageType_CardanoTxRequiredSigner = 334,
  MessageType_CardanoTxInlineDatumChunk = 335,
  MessageType_CardanoTxReferenceScriptChunk = 336,
  MessageType_CardanoTxReferenceInput = 337,
  /** MessageType_RippleGetAddress - Ripple */
  MessageType_RippleGetAddress = 400,
  MessageType_RippleAddress = 401,
  MessageType_RippleSignTx = 402,
  MessageType_RippleSignedTx = 403,
  /** MessageType_MoneroTransactionInitRequest - Monero */
  MessageType_MoneroTransactionInitRequest = 501,
  MessageType_MoneroTransactionInitAck = 502,
  MessageType_MoneroTransactionSetInputRequest = 503,
  MessageType_MoneroTransactionSetInputAck = 504,
  MessageType_MoneroTransactionInputViniRequest = 507,
  MessageType_MoneroTransactionInputViniAck = 508,
  MessageType_MoneroTransactionAllInputsSetRequest = 509,
  MessageType_MoneroTransactionAllInputsSetAck = 510,
  MessageType_MoneroTransactionSetOutputRequest = 511,
  MessageType_MoneroTransactionSetOutputAck = 512,
  MessageType_MoneroTransactionAllOutSetRequest = 513,
  MessageType_MoneroTransactionAllOutSetAck = 514,
  MessageType_MoneroTransactionSignInputRequest = 515,
  MessageType_MoneroTransactionSignInputAck = 516,
  MessageType_MoneroTransactionFinalRequest = 517,
  MessageType_MoneroTransactionFinalAck = 518,
  MessageType_MoneroKeyImageExportInitRequest = 530,
  MessageType_MoneroKeyImageExportInitAck = 531,
  MessageType_MoneroKeyImageSyncStepRequest = 532,
  MessageType_MoneroKeyImageSyncStepAck = 533,
  MessageType_MoneroKeyImageSyncFinalRequest = 534,
  MessageType_MoneroKeyImageSyncFinalAck = 535,
  MessageType_MoneroGetAddress = 540,
  MessageType_MoneroAddress = 541,
  MessageType_MoneroGetWatchKey = 542,
  MessageType_MoneroWatchKey = 543,
  MessageType_DebugMoneroDiagRequest = 546,
  MessageType_DebugMoneroDiagAck = 547,
  MessageType_MoneroGetTxKeyRequest = 550,
  MessageType_MoneroGetTxKeyAck = 551,
  MessageType_MoneroLiveRefreshStartRequest = 552,
  MessageType_MoneroLiveRefreshStartAck = 553,
  MessageType_MoneroLiveRefreshStepRequest = 554,
  MessageType_MoneroLiveRefreshStepAck = 555,
  MessageType_MoneroLiveRefreshFinalRequest = 556,
  MessageType_MoneroLiveRefreshFinalAck = 557,
  /** MessageType_EosGetPublicKey - EOS */
  MessageType_EosGetPublicKey = 600,
  MessageType_EosPublicKey = 601,
  MessageType_EosSignTx = 602,
  MessageType_EosTxActionRequest = 603,
  MessageType_EosTxActionAck = 604,
  MessageType_EosSignedTx = 605,
  /** MessageType_BinanceGetAddress - Binance */
  MessageType_BinanceGetAddress = 700,
  MessageType_BinanceAddress = 701,
  MessageType_BinanceGetPublicKey = 702,
  MessageType_BinancePublicKey = 703,
  MessageType_BinanceSignTx = 704,
  MessageType_BinanceTxRequest = 705,
  MessageType_BinanceTransferMsg = 706,
  MessageType_BinanceOrderMsg = 707,
  MessageType_BinanceCancelMsg = 708,
  MessageType_BinanceSignedTx = 709,
  /** MessageType_WebAuthnListResidentCredentials - WebAuthn */
  MessageType_WebAuthnListResidentCredentials = 800,
  MessageType_WebAuthnCredentials = 801,
  MessageType_WebAuthnAddResidentCredential = 802,
  MessageType_WebAuthnRemoveResidentCredential = 803,
  /** MessageType_SolanaGetPublicKey - Solana */
  MessageType_SolanaGetPublicKey = 900,
  MessageType_SolanaPublicKey = 901,
  MessageType_SolanaGetAddress = 902,
  MessageType_SolanaAddress = 903,
  MessageType_SolanaSignTx = 904,
  MessageType_SolanaTxSignature = 905,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case "MessageType_Initialize":
      return MessageType.MessageType_Initialize;
    case 1:
    case "MessageType_Ping":
      return MessageType.MessageType_Ping;
    case 2:
    case "MessageType_Success":
      return MessageType.MessageType_Success;
    case 3:
    case "MessageType_Failure":
      return MessageType.MessageType_Failure;
    case 4:
    case "MessageType_ChangePin":
      return MessageType.MessageType_ChangePin;
    case 5:
    case "MessageType_WipeDevice":
      return MessageType.MessageType_WipeDevice;
    case 9:
    case "MessageType_GetEntropy":
      return MessageType.MessageType_GetEntropy;
    case 10:
    case "MessageType_Entropy":
      return MessageType.MessageType_Entropy;
    case 13:
    case "MessageType_LoadDevice":
      return MessageType.MessageType_LoadDevice;
    case 14:
    case "MessageType_ResetDevice":
      return MessageType.MessageType_ResetDevice;
    case 16:
    case "MessageType_SetBusy":
      return MessageType.MessageType_SetBusy;
    case 17:
    case "MessageType_Features":
      return MessageType.MessageType_Features;
    case 18:
    case "MessageType_PinMatrixRequest":
      return MessageType.MessageType_PinMatrixRequest;
    case 19:
    case "MessageType_PinMatrixAck":
      return MessageType.MessageType_PinMatrixAck;
    case 20:
    case "MessageType_Cancel":
      return MessageType.MessageType_Cancel;
    case 24:
    case "MessageType_LockDevice":
      return MessageType.MessageType_LockDevice;
    case 25:
    case "MessageType_ApplySettings":
      return MessageType.MessageType_ApplySettings;
    case 26:
    case "MessageType_ButtonRequest":
      return MessageType.MessageType_ButtonRequest;
    case 27:
    case "MessageType_ButtonAck":
      return MessageType.MessageType_ButtonAck;
    case 28:
    case "MessageType_ApplyFlags":
      return MessageType.MessageType_ApplyFlags;
    case 31:
    case "MessageType_GetNonce":
      return MessageType.MessageType_GetNonce;
    case 33:
    case "MessageType_Nonce":
      return MessageType.MessageType_Nonce;
    case 34:
    case "MessageType_BackupDevice":
      return MessageType.MessageType_BackupDevice;
    case 35:
    case "MessageType_EntropyRequest":
      return MessageType.MessageType_EntropyRequest;
    case 36:
    case "MessageType_EntropyAck":
      return MessageType.MessageType_EntropyAck;
    case 41:
    case "MessageType_PassphraseRequest":
      return MessageType.MessageType_PassphraseRequest;
    case 42:
    case "MessageType_PassphraseAck":
      return MessageType.MessageType_PassphraseAck;
    case 45:
    case "MessageType_RecoveryDevice":
      return MessageType.MessageType_RecoveryDevice;
    case 46:
    case "MessageType_WordRequest":
      return MessageType.MessageType_WordRequest;
    case 47:
    case "MessageType_WordAck":
      return MessageType.MessageType_WordAck;
    case 55:
    case "MessageType_GetFeatures":
      return MessageType.MessageType_GetFeatures;
    case 79:
    case "MessageType_SdProtect":
      return MessageType.MessageType_SdProtect;
    case 82:
    case "MessageType_ChangeWipeCode":
      return MessageType.MessageType_ChangeWipeCode;
    case 83:
    case "MessageType_EndSession":
      return MessageType.MessageType_EndSession;
    case 84:
    case "MessageType_DoPreauthorized":
      return MessageType.MessageType_DoPreauthorized;
    case 85:
    case "MessageType_PreauthorizedRequest":
      return MessageType.MessageType_PreauthorizedRequest;
    case 86:
    case "MessageType_CancelAuthorization":
      return MessageType.MessageType_CancelAuthorization;
    case 87:
    case "MessageType_RebootToBootloader":
      return MessageType.MessageType_RebootToBootloader;
    case 88:
    case "MessageType_GetFirmwareHash":
      return MessageType.MessageType_GetFirmwareHash;
    case 89:
    case "MessageType_FirmwareHash":
      return MessageType.MessageType_FirmwareHash;
    case 93:
    case "MessageType_UnlockPath":
      return MessageType.MessageType_UnlockPath;
    case 94:
    case "MessageType_UnlockedPathRequest":
      return MessageType.MessageType_UnlockedPathRequest;
    case 95:
    case "MessageType_ShowDeviceTutorial":
      return MessageType.MessageType_ShowDeviceTutorial;
    case 96:
    case "MessageType_UnlockBootloader":
      return MessageType.MessageType_UnlockBootloader;
    case 97:
    case "MessageType_AuthenticateDevice":
      return MessageType.MessageType_AuthenticateDevice;
    case 98:
    case "MessageType_AuthenticityProof":
      return MessageType.MessageType_AuthenticityProof;
    case 990:
    case "MessageType_ChangeLanguage":
      return MessageType.MessageType_ChangeLanguage;
    case 991:
    case "MessageType_TranslationDataRequest":
      return MessageType.MessageType_TranslationDataRequest;
    case 992:
    case "MessageType_TranslationDataAck":
      return MessageType.MessageType_TranslationDataAck;
    case 993:
    case "MessageType_SetBrightness":
      return MessageType.MessageType_SetBrightness;
    case 63:
    case "MessageType_SetU2FCounter":
      return MessageType.MessageType_SetU2FCounter;
    case 80:
    case "MessageType_GetNextU2FCounter":
      return MessageType.MessageType_GetNextU2FCounter;
    case 81:
    case "MessageType_NextU2FCounter":
      return MessageType.MessageType_NextU2FCounter;
    case 77:
    case "MessageType_Deprecated_PassphraseStateRequest":
      return MessageType.MessageType_Deprecated_PassphraseStateRequest;
    case 78:
    case "MessageType_Deprecated_PassphraseStateAck":
      return MessageType.MessageType_Deprecated_PassphraseStateAck;
    case 6:
    case "MessageType_FirmwareErase":
      return MessageType.MessageType_FirmwareErase;
    case 7:
    case "MessageType_FirmwareUpload":
      return MessageType.MessageType_FirmwareUpload;
    case 8:
    case "MessageType_FirmwareRequest":
      return MessageType.MessageType_FirmwareRequest;
    case 32:
    case "MessageType_ProdTestT1":
      return MessageType.MessageType_ProdTestT1;
    case 11:
    case "MessageType_GetPublicKey":
      return MessageType.MessageType_GetPublicKey;
    case 12:
    case "MessageType_PublicKey":
      return MessageType.MessageType_PublicKey;
    case 15:
    case "MessageType_SignTx":
      return MessageType.MessageType_SignTx;
    case 21:
    case "MessageType_TxRequest":
      return MessageType.MessageType_TxRequest;
    case 22:
    case "MessageType_TxAck":
      return MessageType.MessageType_TxAck;
    case 29:
    case "MessageType_GetAddress":
      return MessageType.MessageType_GetAddress;
    case 30:
    case "MessageType_Address":
      return MessageType.MessageType_Address;
    case 37:
    case "MessageType_TxAckPaymentRequest":
      return MessageType.MessageType_TxAckPaymentRequest;
    case 38:
    case "MessageType_SignMessage":
      return MessageType.MessageType_SignMessage;
    case 39:
    case "MessageType_VerifyMessage":
      return MessageType.MessageType_VerifyMessage;
    case 40:
    case "MessageType_MessageSignature":
      return MessageType.MessageType_MessageSignature;
    case 43:
    case "MessageType_GetOwnershipId":
      return MessageType.MessageType_GetOwnershipId;
    case 44:
    case "MessageType_OwnershipId":
      return MessageType.MessageType_OwnershipId;
    case 49:
    case "MessageType_GetOwnershipProof":
      return MessageType.MessageType_GetOwnershipProof;
    case 50:
    case "MessageType_OwnershipProof":
      return MessageType.MessageType_OwnershipProof;
    case 51:
    case "MessageType_AuthorizeCoinJoin":
      return MessageType.MessageType_AuthorizeCoinJoin;
    case 23:
    case "MessageType_CipherKeyValue":
      return MessageType.MessageType_CipherKeyValue;
    case 48:
    case "MessageType_CipheredKeyValue":
      return MessageType.MessageType_CipheredKeyValue;
    case 53:
    case "MessageType_SignIdentity":
      return MessageType.MessageType_SignIdentity;
    case 54:
    case "MessageType_SignedIdentity":
      return MessageType.MessageType_SignedIdentity;
    case 61:
    case "MessageType_GetECDHSessionKey":
      return MessageType.MessageType_GetECDHSessionKey;
    case 62:
    case "MessageType_ECDHSessionKey":
      return MessageType.MessageType_ECDHSessionKey;
    case 71:
    case "MessageType_CosiCommit":
      return MessageType.MessageType_CosiCommit;
    case 72:
    case "MessageType_CosiCommitment":
      return MessageType.MessageType_CosiCommitment;
    case 73:
    case "MessageType_CosiSign":
      return MessageType.MessageType_CosiSign;
    case 74:
    case "MessageType_CosiSignature":
      return MessageType.MessageType_CosiSignature;
    case 100:
    case "MessageType_DebugLinkDecision":
      return MessageType.MessageType_DebugLinkDecision;
    case 101:
    case "MessageType_DebugLinkGetState":
      return MessageType.MessageType_DebugLinkGetState;
    case 102:
    case "MessageType_DebugLinkState":
      return MessageType.MessageType_DebugLinkState;
    case 103:
    case "MessageType_DebugLinkStop":
      return MessageType.MessageType_DebugLinkStop;
    case 104:
    case "MessageType_DebugLinkLog":
      return MessageType.MessageType_DebugLinkLog;
    case 110:
    case "MessageType_DebugLinkMemoryRead":
      return MessageType.MessageType_DebugLinkMemoryRead;
    case 111:
    case "MessageType_DebugLinkMemory":
      return MessageType.MessageType_DebugLinkMemory;
    case 112:
    case "MessageType_DebugLinkMemoryWrite":
      return MessageType.MessageType_DebugLinkMemoryWrite;
    case 113:
    case "MessageType_DebugLinkFlashErase":
      return MessageType.MessageType_DebugLinkFlashErase;
    case 9001:
    case "MessageType_DebugLinkLayout":
      return MessageType.MessageType_DebugLinkLayout;
    case 9002:
    case "MessageType_DebugLinkReseedRandom":
      return MessageType.MessageType_DebugLinkReseedRandom;
    case 9003:
    case "MessageType_DebugLinkRecordScreen":
      return MessageType.MessageType_DebugLinkRecordScreen;
    case 9005:
    case "MessageType_DebugLinkEraseSdCard":
      return MessageType.MessageType_DebugLinkEraseSdCard;
    case 9006:
    case "MessageType_DebugLinkWatchLayout":
      return MessageType.MessageType_DebugLinkWatchLayout;
    case 9007:
    case "MessageType_DebugLinkResetDebugEvents":
      return MessageType.MessageType_DebugLinkResetDebugEvents;
    case 450:
    case "MessageType_EthereumGetPublicKey":
      return MessageType.MessageType_EthereumGetPublicKey;
    case 451:
    case "MessageType_EthereumPublicKey":
      return MessageType.MessageType_EthereumPublicKey;
    case 56:
    case "MessageType_EthereumGetAddress":
      return MessageType.MessageType_EthereumGetAddress;
    case 57:
    case "MessageType_EthereumAddress":
      return MessageType.MessageType_EthereumAddress;
    case 58:
    case "MessageType_EthereumSignTx":
      return MessageType.MessageType_EthereumSignTx;
    case 452:
    case "MessageType_EthereumSignTxEIP1559":
      return MessageType.MessageType_EthereumSignTxEIP1559;
    case 59:
    case "MessageType_EthereumTxRequest":
      return MessageType.MessageType_EthereumTxRequest;
    case 60:
    case "MessageType_EthereumTxAck":
      return MessageType.MessageType_EthereumTxAck;
    case 64:
    case "MessageType_EthereumSignMessage":
      return MessageType.MessageType_EthereumSignMessage;
    case 65:
    case "MessageType_EthereumVerifyMessage":
      return MessageType.MessageType_EthereumVerifyMessage;
    case 66:
    case "MessageType_EthereumMessageSignature":
      return MessageType.MessageType_EthereumMessageSignature;
    case 464:
    case "MessageType_EthereumSignTypedData":
      return MessageType.MessageType_EthereumSignTypedData;
    case 465:
    case "MessageType_EthereumTypedDataStructRequest":
      return MessageType.MessageType_EthereumTypedDataStructRequest;
    case 466:
    case "MessageType_EthereumTypedDataStructAck":
      return MessageType.MessageType_EthereumTypedDataStructAck;
    case 467:
    case "MessageType_EthereumTypedDataValueRequest":
      return MessageType.MessageType_EthereumTypedDataValueRequest;
    case 468:
    case "MessageType_EthereumTypedDataValueAck":
      return MessageType.MessageType_EthereumTypedDataValueAck;
    case 469:
    case "MessageType_EthereumTypedDataSignature":
      return MessageType.MessageType_EthereumTypedDataSignature;
    case 470:
    case "MessageType_EthereumSignTypedHash":
      return MessageType.MessageType_EthereumSignTypedHash;
    case 67:
    case "MessageType_NEMGetAddress":
      return MessageType.MessageType_NEMGetAddress;
    case 68:
    case "MessageType_NEMAddress":
      return MessageType.MessageType_NEMAddress;
    case 69:
    case "MessageType_NEMSignTx":
      return MessageType.MessageType_NEMSignTx;
    case 70:
    case "MessageType_NEMSignedTx":
      return MessageType.MessageType_NEMSignedTx;
    case 75:
    case "MessageType_NEMDecryptMessage":
      return MessageType.MessageType_NEMDecryptMessage;
    case 76:
    case "MessageType_NEMDecryptedMessage":
      return MessageType.MessageType_NEMDecryptedMessage;
    case 150:
    case "MessageType_TezosGetAddress":
      return MessageType.MessageType_TezosGetAddress;
    case 151:
    case "MessageType_TezosAddress":
      return MessageType.MessageType_TezosAddress;
    case 152:
    case "MessageType_TezosSignTx":
      return MessageType.MessageType_TezosSignTx;
    case 153:
    case "MessageType_TezosSignedTx":
      return MessageType.MessageType_TezosSignedTx;
    case 154:
    case "MessageType_TezosGetPublicKey":
      return MessageType.MessageType_TezosGetPublicKey;
    case 155:
    case "MessageType_TezosPublicKey":
      return MessageType.MessageType_TezosPublicKey;
    case 202:
    case "MessageType_StellarSignTx":
      return MessageType.MessageType_StellarSignTx;
    case 203:
    case "MessageType_StellarTxOpRequest":
      return MessageType.MessageType_StellarTxOpRequest;
    case 207:
    case "MessageType_StellarGetAddress":
      return MessageType.MessageType_StellarGetAddress;
    case 208:
    case "MessageType_StellarAddress":
      return MessageType.MessageType_StellarAddress;
    case 210:
    case "MessageType_StellarCreateAccountOp":
      return MessageType.MessageType_StellarCreateAccountOp;
    case 211:
    case "MessageType_StellarPaymentOp":
      return MessageType.MessageType_StellarPaymentOp;
    case 212:
    case "MessageType_StellarPathPaymentStrictReceiveOp":
      return MessageType.MessageType_StellarPathPaymentStrictReceiveOp;
    case 213:
    case "MessageType_StellarManageSellOfferOp":
      return MessageType.MessageType_StellarManageSellOfferOp;
    case 214:
    case "MessageType_StellarCreatePassiveSellOfferOp":
      return MessageType.MessageType_StellarCreatePassiveSellOfferOp;
    case 215:
    case "MessageType_StellarSetOptionsOp":
      return MessageType.MessageType_StellarSetOptionsOp;
    case 216:
    case "MessageType_StellarChangeTrustOp":
      return MessageType.MessageType_StellarChangeTrustOp;
    case 217:
    case "MessageType_StellarAllowTrustOp":
      return MessageType.MessageType_StellarAllowTrustOp;
    case 218:
    case "MessageType_StellarAccountMergeOp":
      return MessageType.MessageType_StellarAccountMergeOp;
    case 220:
    case "MessageType_StellarManageDataOp":
      return MessageType.MessageType_StellarManageDataOp;
    case 221:
    case "MessageType_StellarBumpSequenceOp":
      return MessageType.MessageType_StellarBumpSequenceOp;
    case 222:
    case "MessageType_StellarManageBuyOfferOp":
      return MessageType.MessageType_StellarManageBuyOfferOp;
    case 223:
    case "MessageType_StellarPathPaymentStrictSendOp":
      return MessageType.MessageType_StellarPathPaymentStrictSendOp;
    case 225:
    case "MessageType_StellarClaimClaimableBalanceOp":
      return MessageType.MessageType_StellarClaimClaimableBalanceOp;
    case 230:
    case "MessageType_StellarSignedTx":
      return MessageType.MessageType_StellarSignedTx;
    case 305:
    case "MessageType_CardanoGetPublicKey":
      return MessageType.MessageType_CardanoGetPublicKey;
    case 306:
    case "MessageType_CardanoPublicKey":
      return MessageType.MessageType_CardanoPublicKey;
    case 307:
    case "MessageType_CardanoGetAddress":
      return MessageType.MessageType_CardanoGetAddress;
    case 308:
    case "MessageType_CardanoAddress":
      return MessageType.MessageType_CardanoAddress;
    case 313:
    case "MessageType_CardanoTxItemAck":
      return MessageType.MessageType_CardanoTxItemAck;
    case 314:
    case "MessageType_CardanoTxAuxiliaryDataSupplement":
      return MessageType.MessageType_CardanoTxAuxiliaryDataSupplement;
    case 315:
    case "MessageType_CardanoTxWitnessRequest":
      return MessageType.MessageType_CardanoTxWitnessRequest;
    case 316:
    case "MessageType_CardanoTxWitnessResponse":
      return MessageType.MessageType_CardanoTxWitnessResponse;
    case 317:
    case "MessageType_CardanoTxHostAck":
      return MessageType.MessageType_CardanoTxHostAck;
    case 318:
    case "MessageType_CardanoTxBodyHash":
      return MessageType.MessageType_CardanoTxBodyHash;
    case 319:
    case "MessageType_CardanoSignTxFinished":
      return MessageType.MessageType_CardanoSignTxFinished;
    case 320:
    case "MessageType_CardanoSignTxInit":
      return MessageType.MessageType_CardanoSignTxInit;
    case 321:
    case "MessageType_CardanoTxInput":
      return MessageType.MessageType_CardanoTxInput;
    case 322:
    case "MessageType_CardanoTxOutput":
      return MessageType.MessageType_CardanoTxOutput;
    case 323:
    case "MessageType_CardanoAssetGroup":
      return MessageType.MessageType_CardanoAssetGroup;
    case 324:
    case "MessageType_CardanoToken":
      return MessageType.MessageType_CardanoToken;
    case 325:
    case "MessageType_CardanoTxCertificate":
      return MessageType.MessageType_CardanoTxCertificate;
    case 326:
    case "MessageType_CardanoTxWithdrawal":
      return MessageType.MessageType_CardanoTxWithdrawal;
    case 327:
    case "MessageType_CardanoTxAuxiliaryData":
      return MessageType.MessageType_CardanoTxAuxiliaryData;
    case 328:
    case "MessageType_CardanoPoolOwner":
      return MessageType.MessageType_CardanoPoolOwner;
    case 329:
    case "MessageType_CardanoPoolRelayParameters":
      return MessageType.MessageType_CardanoPoolRelayParameters;
    case 330:
    case "MessageType_CardanoGetNativeScriptHash":
      return MessageType.MessageType_CardanoGetNativeScriptHash;
    case 331:
    case "MessageType_CardanoNativeScriptHash":
      return MessageType.MessageType_CardanoNativeScriptHash;
    case 332:
    case "MessageType_CardanoTxMint":
      return MessageType.MessageType_CardanoTxMint;
    case 333:
    case "MessageType_CardanoTxCollateralInput":
      return MessageType.MessageType_CardanoTxCollateralInput;
    case 334:
    case "MessageType_CardanoTxRequiredSigner":
      return MessageType.MessageType_CardanoTxRequiredSigner;
    case 335:
    case "MessageType_CardanoTxInlineDatumChunk":
      return MessageType.MessageType_CardanoTxInlineDatumChunk;
    case 336:
    case "MessageType_CardanoTxReferenceScriptChunk":
      return MessageType.MessageType_CardanoTxReferenceScriptChunk;
    case 337:
    case "MessageType_CardanoTxReferenceInput":
      return MessageType.MessageType_CardanoTxReferenceInput;
    case 400:
    case "MessageType_RippleGetAddress":
      return MessageType.MessageType_RippleGetAddress;
    case 401:
    case "MessageType_RippleAddress":
      return MessageType.MessageType_RippleAddress;
    case 402:
    case "MessageType_RippleSignTx":
      return MessageType.MessageType_RippleSignTx;
    case 403:
    case "MessageType_RippleSignedTx":
      return MessageType.MessageType_RippleSignedTx;
    case 501:
    case "MessageType_MoneroTransactionInitRequest":
      return MessageType.MessageType_MoneroTransactionInitRequest;
    case 502:
    case "MessageType_MoneroTransactionInitAck":
      return MessageType.MessageType_MoneroTransactionInitAck;
    case 503:
    case "MessageType_MoneroTransactionSetInputRequest":
      return MessageType.MessageType_MoneroTransactionSetInputRequest;
    case 504:
    case "MessageType_MoneroTransactionSetInputAck":
      return MessageType.MessageType_MoneroTransactionSetInputAck;
    case 507:
    case "MessageType_MoneroTransactionInputViniRequest":
      return MessageType.MessageType_MoneroTransactionInputViniRequest;
    case 508:
    case "MessageType_MoneroTransactionInputViniAck":
      return MessageType.MessageType_MoneroTransactionInputViniAck;
    case 509:
    case "MessageType_MoneroTransactionAllInputsSetRequest":
      return MessageType.MessageType_MoneroTransactionAllInputsSetRequest;
    case 510:
    case "MessageType_MoneroTransactionAllInputsSetAck":
      return MessageType.MessageType_MoneroTransactionAllInputsSetAck;
    case 511:
    case "MessageType_MoneroTransactionSetOutputRequest":
      return MessageType.MessageType_MoneroTransactionSetOutputRequest;
    case 512:
    case "MessageType_MoneroTransactionSetOutputAck":
      return MessageType.MessageType_MoneroTransactionSetOutputAck;
    case 513:
    case "MessageType_MoneroTransactionAllOutSetRequest":
      return MessageType.MessageType_MoneroTransactionAllOutSetRequest;
    case 514:
    case "MessageType_MoneroTransactionAllOutSetAck":
      return MessageType.MessageType_MoneroTransactionAllOutSetAck;
    case 515:
    case "MessageType_MoneroTransactionSignInputRequest":
      return MessageType.MessageType_MoneroTransactionSignInputRequest;
    case 516:
    case "MessageType_MoneroTransactionSignInputAck":
      return MessageType.MessageType_MoneroTransactionSignInputAck;
    case 517:
    case "MessageType_MoneroTransactionFinalRequest":
      return MessageType.MessageType_MoneroTransactionFinalRequest;
    case 518:
    case "MessageType_MoneroTransactionFinalAck":
      return MessageType.MessageType_MoneroTransactionFinalAck;
    case 530:
    case "MessageType_MoneroKeyImageExportInitRequest":
      return MessageType.MessageType_MoneroKeyImageExportInitRequest;
    case 531:
    case "MessageType_MoneroKeyImageExportInitAck":
      return MessageType.MessageType_MoneroKeyImageExportInitAck;
    case 532:
    case "MessageType_MoneroKeyImageSyncStepRequest":
      return MessageType.MessageType_MoneroKeyImageSyncStepRequest;
    case 533:
    case "MessageType_MoneroKeyImageSyncStepAck":
      return MessageType.MessageType_MoneroKeyImageSyncStepAck;
    case 534:
    case "MessageType_MoneroKeyImageSyncFinalRequest":
      return MessageType.MessageType_MoneroKeyImageSyncFinalRequest;
    case 535:
    case "MessageType_MoneroKeyImageSyncFinalAck":
      return MessageType.MessageType_MoneroKeyImageSyncFinalAck;
    case 540:
    case "MessageType_MoneroGetAddress":
      return MessageType.MessageType_MoneroGetAddress;
    case 541:
    case "MessageType_MoneroAddress":
      return MessageType.MessageType_MoneroAddress;
    case 542:
    case "MessageType_MoneroGetWatchKey":
      return MessageType.MessageType_MoneroGetWatchKey;
    case 543:
    case "MessageType_MoneroWatchKey":
      return MessageType.MessageType_MoneroWatchKey;
    case 546:
    case "MessageType_DebugMoneroDiagRequest":
      return MessageType.MessageType_DebugMoneroDiagRequest;
    case 547:
    case "MessageType_DebugMoneroDiagAck":
      return MessageType.MessageType_DebugMoneroDiagAck;
    case 550:
    case "MessageType_MoneroGetTxKeyRequest":
      return MessageType.MessageType_MoneroGetTxKeyRequest;
    case 551:
    case "MessageType_MoneroGetTxKeyAck":
      return MessageType.MessageType_MoneroGetTxKeyAck;
    case 552:
    case "MessageType_MoneroLiveRefreshStartRequest":
      return MessageType.MessageType_MoneroLiveRefreshStartRequest;
    case 553:
    case "MessageType_MoneroLiveRefreshStartAck":
      return MessageType.MessageType_MoneroLiveRefreshStartAck;
    case 554:
    case "MessageType_MoneroLiveRefreshStepRequest":
      return MessageType.MessageType_MoneroLiveRefreshStepRequest;
    case 555:
    case "MessageType_MoneroLiveRefreshStepAck":
      return MessageType.MessageType_MoneroLiveRefreshStepAck;
    case 556:
    case "MessageType_MoneroLiveRefreshFinalRequest":
      return MessageType.MessageType_MoneroLiveRefreshFinalRequest;
    case 557:
    case "MessageType_MoneroLiveRefreshFinalAck":
      return MessageType.MessageType_MoneroLiveRefreshFinalAck;
    case 600:
    case "MessageType_EosGetPublicKey":
      return MessageType.MessageType_EosGetPublicKey;
    case 601:
    case "MessageType_EosPublicKey":
      return MessageType.MessageType_EosPublicKey;
    case 602:
    case "MessageType_EosSignTx":
      return MessageType.MessageType_EosSignTx;
    case 603:
    case "MessageType_EosTxActionRequest":
      return MessageType.MessageType_EosTxActionRequest;
    case 604:
    case "MessageType_EosTxActionAck":
      return MessageType.MessageType_EosTxActionAck;
    case 605:
    case "MessageType_EosSignedTx":
      return MessageType.MessageType_EosSignedTx;
    case 700:
    case "MessageType_BinanceGetAddress":
      return MessageType.MessageType_BinanceGetAddress;
    case 701:
    case "MessageType_BinanceAddress":
      return MessageType.MessageType_BinanceAddress;
    case 702:
    case "MessageType_BinanceGetPublicKey":
      return MessageType.MessageType_BinanceGetPublicKey;
    case 703:
    case "MessageType_BinancePublicKey":
      return MessageType.MessageType_BinancePublicKey;
    case 704:
    case "MessageType_BinanceSignTx":
      return MessageType.MessageType_BinanceSignTx;
    case 705:
    case "MessageType_BinanceTxRequest":
      return MessageType.MessageType_BinanceTxRequest;
    case 706:
    case "MessageType_BinanceTransferMsg":
      return MessageType.MessageType_BinanceTransferMsg;
    case 707:
    case "MessageType_BinanceOrderMsg":
      return MessageType.MessageType_BinanceOrderMsg;
    case 708:
    case "MessageType_BinanceCancelMsg":
      return MessageType.MessageType_BinanceCancelMsg;
    case 709:
    case "MessageType_BinanceSignedTx":
      return MessageType.MessageType_BinanceSignedTx;
    case 800:
    case "MessageType_WebAuthnListResidentCredentials":
      return MessageType.MessageType_WebAuthnListResidentCredentials;
    case 801:
    case "MessageType_WebAuthnCredentials":
      return MessageType.MessageType_WebAuthnCredentials;
    case 802:
    case "MessageType_WebAuthnAddResidentCredential":
      return MessageType.MessageType_WebAuthnAddResidentCredential;
    case 803:
    case "MessageType_WebAuthnRemoveResidentCredential":
      return MessageType.MessageType_WebAuthnRemoveResidentCredential;
    case 900:
    case "MessageType_SolanaGetPublicKey":
      return MessageType.MessageType_SolanaGetPublicKey;
    case 901:
    case "MessageType_SolanaPublicKey":
      return MessageType.MessageType_SolanaPublicKey;
    case 902:
    case "MessageType_SolanaGetAddress":
      return MessageType.MessageType_SolanaGetAddress;
    case 903:
    case "MessageType_SolanaAddress":
      return MessageType.MessageType_SolanaAddress;
    case 904:
    case "MessageType_SolanaSignTx":
      return MessageType.MessageType_SolanaSignTx;
    case 905:
    case "MessageType_SolanaTxSignature":
      return MessageType.MessageType_SolanaTxSignature;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageType.UNRECOGNIZED;
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.MessageType_Initialize:
      return "MessageType_Initialize";
    case MessageType.MessageType_Ping:
      return "MessageType_Ping";
    case MessageType.MessageType_Success:
      return "MessageType_Success";
    case MessageType.MessageType_Failure:
      return "MessageType_Failure";
    case MessageType.MessageType_ChangePin:
      return "MessageType_ChangePin";
    case MessageType.MessageType_WipeDevice:
      return "MessageType_WipeDevice";
    case MessageType.MessageType_GetEntropy:
      return "MessageType_GetEntropy";
    case MessageType.MessageType_Entropy:
      return "MessageType_Entropy";
    case MessageType.MessageType_LoadDevice:
      return "MessageType_LoadDevice";
    case MessageType.MessageType_ResetDevice:
      return "MessageType_ResetDevice";
    case MessageType.MessageType_SetBusy:
      return "MessageType_SetBusy";
    case MessageType.MessageType_Features:
      return "MessageType_Features";
    case MessageType.MessageType_PinMatrixRequest:
      return "MessageType_PinMatrixRequest";
    case MessageType.MessageType_PinMatrixAck:
      return "MessageType_PinMatrixAck";
    case MessageType.MessageType_Cancel:
      return "MessageType_Cancel";
    case MessageType.MessageType_LockDevice:
      return "MessageType_LockDevice";
    case MessageType.MessageType_ApplySettings:
      return "MessageType_ApplySettings";
    case MessageType.MessageType_ButtonRequest:
      return "MessageType_ButtonRequest";
    case MessageType.MessageType_ButtonAck:
      return "MessageType_ButtonAck";
    case MessageType.MessageType_ApplyFlags:
      return "MessageType_ApplyFlags";
    case MessageType.MessageType_GetNonce:
      return "MessageType_GetNonce";
    case MessageType.MessageType_Nonce:
      return "MessageType_Nonce";
    case MessageType.MessageType_BackupDevice:
      return "MessageType_BackupDevice";
    case MessageType.MessageType_EntropyRequest:
      return "MessageType_EntropyRequest";
    case MessageType.MessageType_EntropyAck:
      return "MessageType_EntropyAck";
    case MessageType.MessageType_PassphraseRequest:
      return "MessageType_PassphraseRequest";
    case MessageType.MessageType_PassphraseAck:
      return "MessageType_PassphraseAck";
    case MessageType.MessageType_RecoveryDevice:
      return "MessageType_RecoveryDevice";
    case MessageType.MessageType_WordRequest:
      return "MessageType_WordRequest";
    case MessageType.MessageType_WordAck:
      return "MessageType_WordAck";
    case MessageType.MessageType_GetFeatures:
      return "MessageType_GetFeatures";
    case MessageType.MessageType_SdProtect:
      return "MessageType_SdProtect";
    case MessageType.MessageType_ChangeWipeCode:
      return "MessageType_ChangeWipeCode";
    case MessageType.MessageType_EndSession:
      return "MessageType_EndSession";
    case MessageType.MessageType_DoPreauthorized:
      return "MessageType_DoPreauthorized";
    case MessageType.MessageType_PreauthorizedRequest:
      return "MessageType_PreauthorizedRequest";
    case MessageType.MessageType_CancelAuthorization:
      return "MessageType_CancelAuthorization";
    case MessageType.MessageType_RebootToBootloader:
      return "MessageType_RebootToBootloader";
    case MessageType.MessageType_GetFirmwareHash:
      return "MessageType_GetFirmwareHash";
    case MessageType.MessageType_FirmwareHash:
      return "MessageType_FirmwareHash";
    case MessageType.MessageType_UnlockPath:
      return "MessageType_UnlockPath";
    case MessageType.MessageType_UnlockedPathRequest:
      return "MessageType_UnlockedPathRequest";
    case MessageType.MessageType_ShowDeviceTutorial:
      return "MessageType_ShowDeviceTutorial";
    case MessageType.MessageType_UnlockBootloader:
      return "MessageType_UnlockBootloader";
    case MessageType.MessageType_AuthenticateDevice:
      return "MessageType_AuthenticateDevice";
    case MessageType.MessageType_AuthenticityProof:
      return "MessageType_AuthenticityProof";
    case MessageType.MessageType_ChangeLanguage:
      return "MessageType_ChangeLanguage";
    case MessageType.MessageType_TranslationDataRequest:
      return "MessageType_TranslationDataRequest";
    case MessageType.MessageType_TranslationDataAck:
      return "MessageType_TranslationDataAck";
    case MessageType.MessageType_SetBrightness:
      return "MessageType_SetBrightness";
    case MessageType.MessageType_SetU2FCounter:
      return "MessageType_SetU2FCounter";
    case MessageType.MessageType_GetNextU2FCounter:
      return "MessageType_GetNextU2FCounter";
    case MessageType.MessageType_NextU2FCounter:
      return "MessageType_NextU2FCounter";
    case MessageType.MessageType_Deprecated_PassphraseStateRequest:
      return "MessageType_Deprecated_PassphraseStateRequest";
    case MessageType.MessageType_Deprecated_PassphraseStateAck:
      return "MessageType_Deprecated_PassphraseStateAck";
    case MessageType.MessageType_FirmwareErase:
      return "MessageType_FirmwareErase";
    case MessageType.MessageType_FirmwareUpload:
      return "MessageType_FirmwareUpload";
    case MessageType.MessageType_FirmwareRequest:
      return "MessageType_FirmwareRequest";
    case MessageType.MessageType_ProdTestT1:
      return "MessageType_ProdTestT1";
    case MessageType.MessageType_GetPublicKey:
      return "MessageType_GetPublicKey";
    case MessageType.MessageType_PublicKey:
      return "MessageType_PublicKey";
    case MessageType.MessageType_SignTx:
      return "MessageType_SignTx";
    case MessageType.MessageType_TxRequest:
      return "MessageType_TxRequest";
    case MessageType.MessageType_TxAck:
      return "MessageType_TxAck";
    case MessageType.MessageType_GetAddress:
      return "MessageType_GetAddress";
    case MessageType.MessageType_Address:
      return "MessageType_Address";
    case MessageType.MessageType_TxAckPaymentRequest:
      return "MessageType_TxAckPaymentRequest";
    case MessageType.MessageType_SignMessage:
      return "MessageType_SignMessage";
    case MessageType.MessageType_VerifyMessage:
      return "MessageType_VerifyMessage";
    case MessageType.MessageType_MessageSignature:
      return "MessageType_MessageSignature";
    case MessageType.MessageType_GetOwnershipId:
      return "MessageType_GetOwnershipId";
    case MessageType.MessageType_OwnershipId:
      return "MessageType_OwnershipId";
    case MessageType.MessageType_GetOwnershipProof:
      return "MessageType_GetOwnershipProof";
    case MessageType.MessageType_OwnershipProof:
      return "MessageType_OwnershipProof";
    case MessageType.MessageType_AuthorizeCoinJoin:
      return "MessageType_AuthorizeCoinJoin";
    case MessageType.MessageType_CipherKeyValue:
      return "MessageType_CipherKeyValue";
    case MessageType.MessageType_CipheredKeyValue:
      return "MessageType_CipheredKeyValue";
    case MessageType.MessageType_SignIdentity:
      return "MessageType_SignIdentity";
    case MessageType.MessageType_SignedIdentity:
      return "MessageType_SignedIdentity";
    case MessageType.MessageType_GetECDHSessionKey:
      return "MessageType_GetECDHSessionKey";
    case MessageType.MessageType_ECDHSessionKey:
      return "MessageType_ECDHSessionKey";
    case MessageType.MessageType_CosiCommit:
      return "MessageType_CosiCommit";
    case MessageType.MessageType_CosiCommitment:
      return "MessageType_CosiCommitment";
    case MessageType.MessageType_CosiSign:
      return "MessageType_CosiSign";
    case MessageType.MessageType_CosiSignature:
      return "MessageType_CosiSignature";
    case MessageType.MessageType_DebugLinkDecision:
      return "MessageType_DebugLinkDecision";
    case MessageType.MessageType_DebugLinkGetState:
      return "MessageType_DebugLinkGetState";
    case MessageType.MessageType_DebugLinkState:
      return "MessageType_DebugLinkState";
    case MessageType.MessageType_DebugLinkStop:
      return "MessageType_DebugLinkStop";
    case MessageType.MessageType_DebugLinkLog:
      return "MessageType_DebugLinkLog";
    case MessageType.MessageType_DebugLinkMemoryRead:
      return "MessageType_DebugLinkMemoryRead";
    case MessageType.MessageType_DebugLinkMemory:
      return "MessageType_DebugLinkMemory";
    case MessageType.MessageType_DebugLinkMemoryWrite:
      return "MessageType_DebugLinkMemoryWrite";
    case MessageType.MessageType_DebugLinkFlashErase:
      return "MessageType_DebugLinkFlashErase";
    case MessageType.MessageType_DebugLinkLayout:
      return "MessageType_DebugLinkLayout";
    case MessageType.MessageType_DebugLinkReseedRandom:
      return "MessageType_DebugLinkReseedRandom";
    case MessageType.MessageType_DebugLinkRecordScreen:
      return "MessageType_DebugLinkRecordScreen";
    case MessageType.MessageType_DebugLinkEraseSdCard:
      return "MessageType_DebugLinkEraseSdCard";
    case MessageType.MessageType_DebugLinkWatchLayout:
      return "MessageType_DebugLinkWatchLayout";
    case MessageType.MessageType_DebugLinkResetDebugEvents:
      return "MessageType_DebugLinkResetDebugEvents";
    case MessageType.MessageType_EthereumGetPublicKey:
      return "MessageType_EthereumGetPublicKey";
    case MessageType.MessageType_EthereumPublicKey:
      return "MessageType_EthereumPublicKey";
    case MessageType.MessageType_EthereumGetAddress:
      return "MessageType_EthereumGetAddress";
    case MessageType.MessageType_EthereumAddress:
      return "MessageType_EthereumAddress";
    case MessageType.MessageType_EthereumSignTx:
      return "MessageType_EthereumSignTx";
    case MessageType.MessageType_EthereumSignTxEIP1559:
      return "MessageType_EthereumSignTxEIP1559";
    case MessageType.MessageType_EthereumTxRequest:
      return "MessageType_EthereumTxRequest";
    case MessageType.MessageType_EthereumTxAck:
      return "MessageType_EthereumTxAck";
    case MessageType.MessageType_EthereumSignMessage:
      return "MessageType_EthereumSignMessage";
    case MessageType.MessageType_EthereumVerifyMessage:
      return "MessageType_EthereumVerifyMessage";
    case MessageType.MessageType_EthereumMessageSignature:
      return "MessageType_EthereumMessageSignature";
    case MessageType.MessageType_EthereumSignTypedData:
      return "MessageType_EthereumSignTypedData";
    case MessageType.MessageType_EthereumTypedDataStructRequest:
      return "MessageType_EthereumTypedDataStructRequest";
    case MessageType.MessageType_EthereumTypedDataStructAck:
      return "MessageType_EthereumTypedDataStructAck";
    case MessageType.MessageType_EthereumTypedDataValueRequest:
      return "MessageType_EthereumTypedDataValueRequest";
    case MessageType.MessageType_EthereumTypedDataValueAck:
      return "MessageType_EthereumTypedDataValueAck";
    case MessageType.MessageType_EthereumTypedDataSignature:
      return "MessageType_EthereumTypedDataSignature";
    case MessageType.MessageType_EthereumSignTypedHash:
      return "MessageType_EthereumSignTypedHash";
    case MessageType.MessageType_NEMGetAddress:
      return "MessageType_NEMGetAddress";
    case MessageType.MessageType_NEMAddress:
      return "MessageType_NEMAddress";
    case MessageType.MessageType_NEMSignTx:
      return "MessageType_NEMSignTx";
    case MessageType.MessageType_NEMSignedTx:
      return "MessageType_NEMSignedTx";
    case MessageType.MessageType_NEMDecryptMessage:
      return "MessageType_NEMDecryptMessage";
    case MessageType.MessageType_NEMDecryptedMessage:
      return "MessageType_NEMDecryptedMessage";
    case MessageType.MessageType_TezosGetAddress:
      return "MessageType_TezosGetAddress";
    case MessageType.MessageType_TezosAddress:
      return "MessageType_TezosAddress";
    case MessageType.MessageType_TezosSignTx:
      return "MessageType_TezosSignTx";
    case MessageType.MessageType_TezosSignedTx:
      return "MessageType_TezosSignedTx";
    case MessageType.MessageType_TezosGetPublicKey:
      return "MessageType_TezosGetPublicKey";
    case MessageType.MessageType_TezosPublicKey:
      return "MessageType_TezosPublicKey";
    case MessageType.MessageType_StellarSignTx:
      return "MessageType_StellarSignTx";
    case MessageType.MessageType_StellarTxOpRequest:
      return "MessageType_StellarTxOpRequest";
    case MessageType.MessageType_StellarGetAddress:
      return "MessageType_StellarGetAddress";
    case MessageType.MessageType_StellarAddress:
      return "MessageType_StellarAddress";
    case MessageType.MessageType_StellarCreateAccountOp:
      return "MessageType_StellarCreateAccountOp";
    case MessageType.MessageType_StellarPaymentOp:
      return "MessageType_StellarPaymentOp";
    case MessageType.MessageType_StellarPathPaymentStrictReceiveOp:
      return "MessageType_StellarPathPaymentStrictReceiveOp";
    case MessageType.MessageType_StellarManageSellOfferOp:
      return "MessageType_StellarManageSellOfferOp";
    case MessageType.MessageType_StellarCreatePassiveSellOfferOp:
      return "MessageType_StellarCreatePassiveSellOfferOp";
    case MessageType.MessageType_StellarSetOptionsOp:
      return "MessageType_StellarSetOptionsOp";
    case MessageType.MessageType_StellarChangeTrustOp:
      return "MessageType_StellarChangeTrustOp";
    case MessageType.MessageType_StellarAllowTrustOp:
      return "MessageType_StellarAllowTrustOp";
    case MessageType.MessageType_StellarAccountMergeOp:
      return "MessageType_StellarAccountMergeOp";
    case MessageType.MessageType_StellarManageDataOp:
      return "MessageType_StellarManageDataOp";
    case MessageType.MessageType_StellarBumpSequenceOp:
      return "MessageType_StellarBumpSequenceOp";
    case MessageType.MessageType_StellarManageBuyOfferOp:
      return "MessageType_StellarManageBuyOfferOp";
    case MessageType.MessageType_StellarPathPaymentStrictSendOp:
      return "MessageType_StellarPathPaymentStrictSendOp";
    case MessageType.MessageType_StellarClaimClaimableBalanceOp:
      return "MessageType_StellarClaimClaimableBalanceOp";
    case MessageType.MessageType_StellarSignedTx:
      return "MessageType_StellarSignedTx";
    case MessageType.MessageType_CardanoGetPublicKey:
      return "MessageType_CardanoGetPublicKey";
    case MessageType.MessageType_CardanoPublicKey:
      return "MessageType_CardanoPublicKey";
    case MessageType.MessageType_CardanoGetAddress:
      return "MessageType_CardanoGetAddress";
    case MessageType.MessageType_CardanoAddress:
      return "MessageType_CardanoAddress";
    case MessageType.MessageType_CardanoTxItemAck:
      return "MessageType_CardanoTxItemAck";
    case MessageType.MessageType_CardanoTxAuxiliaryDataSupplement:
      return "MessageType_CardanoTxAuxiliaryDataSupplement";
    case MessageType.MessageType_CardanoTxWitnessRequest:
      return "MessageType_CardanoTxWitnessRequest";
    case MessageType.MessageType_CardanoTxWitnessResponse:
      return "MessageType_CardanoTxWitnessResponse";
    case MessageType.MessageType_CardanoTxHostAck:
      return "MessageType_CardanoTxHostAck";
    case MessageType.MessageType_CardanoTxBodyHash:
      return "MessageType_CardanoTxBodyHash";
    case MessageType.MessageType_CardanoSignTxFinished:
      return "MessageType_CardanoSignTxFinished";
    case MessageType.MessageType_CardanoSignTxInit:
      return "MessageType_CardanoSignTxInit";
    case MessageType.MessageType_CardanoTxInput:
      return "MessageType_CardanoTxInput";
    case MessageType.MessageType_CardanoTxOutput:
      return "MessageType_CardanoTxOutput";
    case MessageType.MessageType_CardanoAssetGroup:
      return "MessageType_CardanoAssetGroup";
    case MessageType.MessageType_CardanoToken:
      return "MessageType_CardanoToken";
    case MessageType.MessageType_CardanoTxCertificate:
      return "MessageType_CardanoTxCertificate";
    case MessageType.MessageType_CardanoTxWithdrawal:
      return "MessageType_CardanoTxWithdrawal";
    case MessageType.MessageType_CardanoTxAuxiliaryData:
      return "MessageType_CardanoTxAuxiliaryData";
    case MessageType.MessageType_CardanoPoolOwner:
      return "MessageType_CardanoPoolOwner";
    case MessageType.MessageType_CardanoPoolRelayParameters:
      return "MessageType_CardanoPoolRelayParameters";
    case MessageType.MessageType_CardanoGetNativeScriptHash:
      return "MessageType_CardanoGetNativeScriptHash";
    case MessageType.MessageType_CardanoNativeScriptHash:
      return "MessageType_CardanoNativeScriptHash";
    case MessageType.MessageType_CardanoTxMint:
      return "MessageType_CardanoTxMint";
    case MessageType.MessageType_CardanoTxCollateralInput:
      return "MessageType_CardanoTxCollateralInput";
    case MessageType.MessageType_CardanoTxRequiredSigner:
      return "MessageType_CardanoTxRequiredSigner";
    case MessageType.MessageType_CardanoTxInlineDatumChunk:
      return "MessageType_CardanoTxInlineDatumChunk";
    case MessageType.MessageType_CardanoTxReferenceScriptChunk:
      return "MessageType_CardanoTxReferenceScriptChunk";
    case MessageType.MessageType_CardanoTxReferenceInput:
      return "MessageType_CardanoTxReferenceInput";
    case MessageType.MessageType_RippleGetAddress:
      return "MessageType_RippleGetAddress";
    case MessageType.MessageType_RippleAddress:
      return "MessageType_RippleAddress";
    case MessageType.MessageType_RippleSignTx:
      return "MessageType_RippleSignTx";
    case MessageType.MessageType_RippleSignedTx:
      return "MessageType_RippleSignedTx";
    case MessageType.MessageType_MoneroTransactionInitRequest:
      return "MessageType_MoneroTransactionInitRequest";
    case MessageType.MessageType_MoneroTransactionInitAck:
      return "MessageType_MoneroTransactionInitAck";
    case MessageType.MessageType_MoneroTransactionSetInputRequest:
      return "MessageType_MoneroTransactionSetInputRequest";
    case MessageType.MessageType_MoneroTransactionSetInputAck:
      return "MessageType_MoneroTransactionSetInputAck";
    case MessageType.MessageType_MoneroTransactionInputViniRequest:
      return "MessageType_MoneroTransactionInputViniRequest";
    case MessageType.MessageType_MoneroTransactionInputViniAck:
      return "MessageType_MoneroTransactionInputViniAck";
    case MessageType.MessageType_MoneroTransactionAllInputsSetRequest:
      return "MessageType_MoneroTransactionAllInputsSetRequest";
    case MessageType.MessageType_MoneroTransactionAllInputsSetAck:
      return "MessageType_MoneroTransactionAllInputsSetAck";
    case MessageType.MessageType_MoneroTransactionSetOutputRequest:
      return "MessageType_MoneroTransactionSetOutputRequest";
    case MessageType.MessageType_MoneroTransactionSetOutputAck:
      return "MessageType_MoneroTransactionSetOutputAck";
    case MessageType.MessageType_MoneroTransactionAllOutSetRequest:
      return "MessageType_MoneroTransactionAllOutSetRequest";
    case MessageType.MessageType_MoneroTransactionAllOutSetAck:
      return "MessageType_MoneroTransactionAllOutSetAck";
    case MessageType.MessageType_MoneroTransactionSignInputRequest:
      return "MessageType_MoneroTransactionSignInputRequest";
    case MessageType.MessageType_MoneroTransactionSignInputAck:
      return "MessageType_MoneroTransactionSignInputAck";
    case MessageType.MessageType_MoneroTransactionFinalRequest:
      return "MessageType_MoneroTransactionFinalRequest";
    case MessageType.MessageType_MoneroTransactionFinalAck:
      return "MessageType_MoneroTransactionFinalAck";
    case MessageType.MessageType_MoneroKeyImageExportInitRequest:
      return "MessageType_MoneroKeyImageExportInitRequest";
    case MessageType.MessageType_MoneroKeyImageExportInitAck:
      return "MessageType_MoneroKeyImageExportInitAck";
    case MessageType.MessageType_MoneroKeyImageSyncStepRequest:
      return "MessageType_MoneroKeyImageSyncStepRequest";
    case MessageType.MessageType_MoneroKeyImageSyncStepAck:
      return "MessageType_MoneroKeyImageSyncStepAck";
    case MessageType.MessageType_MoneroKeyImageSyncFinalRequest:
      return "MessageType_MoneroKeyImageSyncFinalRequest";
    case MessageType.MessageType_MoneroKeyImageSyncFinalAck:
      return "MessageType_MoneroKeyImageSyncFinalAck";
    case MessageType.MessageType_MoneroGetAddress:
      return "MessageType_MoneroGetAddress";
    case MessageType.MessageType_MoneroAddress:
      return "MessageType_MoneroAddress";
    case MessageType.MessageType_MoneroGetWatchKey:
      return "MessageType_MoneroGetWatchKey";
    case MessageType.MessageType_MoneroWatchKey:
      return "MessageType_MoneroWatchKey";
    case MessageType.MessageType_DebugMoneroDiagRequest:
      return "MessageType_DebugMoneroDiagRequest";
    case MessageType.MessageType_DebugMoneroDiagAck:
      return "MessageType_DebugMoneroDiagAck";
    case MessageType.MessageType_MoneroGetTxKeyRequest:
      return "MessageType_MoneroGetTxKeyRequest";
    case MessageType.MessageType_MoneroGetTxKeyAck:
      return "MessageType_MoneroGetTxKeyAck";
    case MessageType.MessageType_MoneroLiveRefreshStartRequest:
      return "MessageType_MoneroLiveRefreshStartRequest";
    case MessageType.MessageType_MoneroLiveRefreshStartAck:
      return "MessageType_MoneroLiveRefreshStartAck";
    case MessageType.MessageType_MoneroLiveRefreshStepRequest:
      return "MessageType_MoneroLiveRefreshStepRequest";
    case MessageType.MessageType_MoneroLiveRefreshStepAck:
      return "MessageType_MoneroLiveRefreshStepAck";
    case MessageType.MessageType_MoneroLiveRefreshFinalRequest:
      return "MessageType_MoneroLiveRefreshFinalRequest";
    case MessageType.MessageType_MoneroLiveRefreshFinalAck:
      return "MessageType_MoneroLiveRefreshFinalAck";
    case MessageType.MessageType_EosGetPublicKey:
      return "MessageType_EosGetPublicKey";
    case MessageType.MessageType_EosPublicKey:
      return "MessageType_EosPublicKey";
    case MessageType.MessageType_EosSignTx:
      return "MessageType_EosSignTx";
    case MessageType.MessageType_EosTxActionRequest:
      return "MessageType_EosTxActionRequest";
    case MessageType.MessageType_EosTxActionAck:
      return "MessageType_EosTxActionAck";
    case MessageType.MessageType_EosSignedTx:
      return "MessageType_EosSignedTx";
    case MessageType.MessageType_BinanceGetAddress:
      return "MessageType_BinanceGetAddress";
    case MessageType.MessageType_BinanceAddress:
      return "MessageType_BinanceAddress";
    case MessageType.MessageType_BinanceGetPublicKey:
      return "MessageType_BinanceGetPublicKey";
    case MessageType.MessageType_BinancePublicKey:
      return "MessageType_BinancePublicKey";
    case MessageType.MessageType_BinanceSignTx:
      return "MessageType_BinanceSignTx";
    case MessageType.MessageType_BinanceTxRequest:
      return "MessageType_BinanceTxRequest";
    case MessageType.MessageType_BinanceTransferMsg:
      return "MessageType_BinanceTransferMsg";
    case MessageType.MessageType_BinanceOrderMsg:
      return "MessageType_BinanceOrderMsg";
    case MessageType.MessageType_BinanceCancelMsg:
      return "MessageType_BinanceCancelMsg";
    case MessageType.MessageType_BinanceSignedTx:
      return "MessageType_BinanceSignedTx";
    case MessageType.MessageType_WebAuthnListResidentCredentials:
      return "MessageType_WebAuthnListResidentCredentials";
    case MessageType.MessageType_WebAuthnCredentials:
      return "MessageType_WebAuthnCredentials";
    case MessageType.MessageType_WebAuthnAddResidentCredential:
      return "MessageType_WebAuthnAddResidentCredential";
    case MessageType.MessageType_WebAuthnRemoveResidentCredential:
      return "MessageType_WebAuthnRemoveResidentCredential";
    case MessageType.MessageType_SolanaGetPublicKey:
      return "MessageType_SolanaGetPublicKey";
    case MessageType.MessageType_SolanaPublicKey:
      return "MessageType_SolanaPublicKey";
    case MessageType.MessageType_SolanaGetAddress:
      return "MessageType_SolanaGetAddress";
    case MessageType.MessageType_SolanaAddress:
      return "MessageType_SolanaAddress";
    case MessageType.MessageType_SolanaSignTx:
      return "MessageType_SolanaSignTx";
    case MessageType.MessageType_SolanaTxSignature:
      return "MessageType_SolanaTxSignature";
    case MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
